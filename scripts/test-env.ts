#!/usr/bin/env bun

/**
 * Script para testar configura√ß√µes de ambiente com Zod
 * Execute: bun scripts/test-env.ts
 */

import {
  validateEnvironment,
  getServerEnv,
  isProduction,
  isDemoMode,
  getBusinessConfig,
} from "../src/config/environment";

// console.log('üß™ Testando configura√ß√µes de ambiente com Zod...\n');

try {
  // Valida o ambiente
  validateEnvironment();

  // Obt√©m as configura√ß√µes validadas
  const env = getServerEnv();
  const business = getBusinessConfig();

  // console.log('üìã Resumo das configura√ß√µes:');
  // console.log('‚îÄ'.repeat(50));

  // Informa√ß√µes b√°sicas
  // console.log(`üåç Ambiente: ${env.NODE_ENV}`);
  // console.log(`üè† URL Base: ${env.NEXT_PUBLIC_BASE_URL}`);
  // console.log(`üé≠ Modo Demo: ${isDemoMode() ? '‚úÖ Ativo' : '‚ùå Inativo'}`);
  // console.log(`üêõ Debug: ${env.NEXT_PUBLIC_DEBUG_MODE ? '‚úÖ Ativo' : '‚ùå Inativo'}`);
  // console.log(`üìù Log Level: ${env.NEXT_PUBLIC_LOG_LEVEL}`);

  // Configura√ß√µes do Pagar.me
  // console.log('\nüí≥ Pagar.me:');
  // console.log(`   API Key: ${env.PAGARME_API_KEY.substring(0, 15)}...`);
  // console.log(`   Tipo: ${env.PAGARME_API_KEY.startsWith('ak_test_') ? 'Teste' : 'Produ√ß√£o'}`);
  // console.log(`   URL da API: ${env.PAGARME_API_URL}`);

  // Configura√ß√µes de neg√≥cio
  // console.log('\nüí∞ Neg√≥cio:');
  // console.log(`   Valor m√≠nimo: ${business.minOrderValue.formatted}`);
  // console.log(`   Taxa de entrega: ${business.deliveryFee.formatted}`);
  // console.log(`   Prazo de entrega: ${business.deliveryDays} dias`);

  // Valida√ß√µes espec√≠ficas
  // console.log('\nüîç Valida√ß√µes:');

  // Verifica se est√° usando chave de teste em produ√ß√£o
  if (isProduction() && env.PAGARME_API_KEY.startsWith("ak_test_")) {
    // console.log('‚ö†Ô∏è  ATEN√á√ÉO: Usando chave de teste em produ√ß√£o!');
  } else {
    // console.log('‚úÖ Chave do Pagar.me apropriada para o ambiente');
  }

  // Verifica se o modo demo est√° adequado
  if (isProduction() && isDemoMode()) {
    // console.log('‚ö†Ô∏è  ATEN√á√ÉO: Modo demo ativo em produ√ß√£o!');
  } else {
    // console.log('‚úÖ Modo demo apropriado para o ambiente');
  }

  // Verifica HTTPS em produ√ß√£o
  if (isProduction() && !env.NEXT_PUBLIC_BASE_URL.startsWith("https://")) {
    // console.log('‚ö†Ô∏è  ATEN√á√ÉO: URL n√£o usa HTTPS em produ√ß√£o!');
  } else if (isProduction()) {
    // console.log('‚úÖ HTTPS configurado para produ√ß√£o');
  } else {
    // console.log('‚ÑπÔ∏è  HTTP em desenvolvimento (OK)');
  }

  // console.log('\n‚úÖ Teste conclu√≠do com sucesso!');
  // console.log('üéØ Todas as configura√ß√µes foram validadas pelo Zod');
} catch (error) {
  console.error("\n‚ùå Erro na valida√ß√£o:", error);
  // console.log('\nüõ†Ô∏è  Para corrigir:');
  // console.log('1. Verifique se o arquivo .env.local existe');
  // console.log('2. Copie de .env.example se necess√°rio: cp .env.example .env.local');
  // console.log('3. Configure as vari√°veis obrigat√≥rias');
  // console.log('4. Consulte ENVIRONMENT.md para mais detalhes');
  // console.log('5. O Zod fornece valida√ß√£o detalhada dos tipos e formatos');

  process.exit(1);
}
